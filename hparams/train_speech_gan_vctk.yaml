# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 2234
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]

# Set up folders for reading from and writing to
# Dataset will be downloaded to the `data_folder`
# If you plan to train a system on an HPC cluster with a big dataset,
# we strongly suggest doing the following:
# 1- Compress the dataset in a single tar or zip file.
# 2- Copy your dataset locally (i.e., the local disk of the computing node).
# 3- Uncompress the dataset in the local folder.
# 4- Set data_folder with the local path.
# Reading data from the local disk of the compute node (e.g. $SLURM_TMPDIR with SLURM-based clusters) is very important.
# It allows you to read the data much faster without slowing down the shared filesystem.
data_folder: /home/sturjw/Datasets/VCTK
json_folder: ./json

output_folder: !ref ./results/speech/<seed>/ARGAN_finetune_VCTK
save_folder: !ref <output_folder>/save
samples_folder: !ref <output_folder>/test_samples

train_log: !ref <output_folder>/train_log.txt
tensorboard_logs: !ref <output_folder>/tb_logs

# Path where data manifest files will be stored
# The data manifest files are created by the data preparation script.

# dataset: LibriTTS
# train_annotation: !ref <json_folder>/speech_train_libritts.json
# valid_annotation: !ref <json_folder>/speech_valid_libritts.json
# test_annotation: !ref <json_folder>/speech_test_libritts.json
# train_subsets: ["train-clean-100", "train-clean-360"]
# valid_subsets: ["dev-clean"]
# test_subsets: ["test-clean"]
# skip_prep: False
# segment_size: 0.5
# min_duration:
#     train: 0
#     valid: 1.5
#     test: 1.5

dataset: VCTK
train_annotation: !ref <json_folder>/speech_train_vctk.json
valid_annotation: !ref <json_folder>/speech_valid_vctk.json
test_annotation: !ref <json_folder>/speech_test_vctk.json
skip_prep: False
segment_size: 0.5
min_duration:
    train: 0
    valid: 0
    test: 0
mic_id:
  - mic1

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

tensorboard_train_logger: !new:speechbrain.utils.train_logger.TensorboardLogger
    save_dir: !ref <tensorboard_logs>

# Training Parameters
number_of_epochs: 400
batch_size: 64
max_grad_norm: 5.0
valid_epochs: 40

fine_tune: True
trained_generator: 

# Test stage:
# Visualize and save the first few audios
sample_rate: 16000
log_save: 5
pesq_n_jobs: 24 # Number of jobs to compute metrics (increase it for a speed up)
win_length: 320
hop_length: 160
n_fft: 320
win_type: hann

train_dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: 8

valid_dataloader_options:
    batch_size: 1
    shuffle: False
    num_workers: 8

test_dataloader_options:
    batch_size: 1
    shuffle: False
    num_workers: 8

# adv train
learning_rate_g: 0.00003
learning_rate_d: 0.0003
weight_decay: 0.9999
adam_b1: 0.8
adam_b2: 0.99

generator: !new:models.ARN
    win_len: !ref <win_length>
    win_inc: !ref <hop_length>
    fft_len: !ref <n_fft>
    win_type: !ref <win_type>
    kernel_size: !tuple (5, 5, 5, 5)
    kernel_stride: !tuple (1, 4, 4, 2)
    kernel_num: !tuple (16, 32, 64, 120)
    rnn_layers: 2
    rnn_units: 64
    rnn_type: LSTM
    attn_layers: 2
    n_heads: 8
    n_quantizers: 6
    bit_per_cbk: 10
    comp_law: power-law
    alpha: 0.5

discriminator: !new:speechbrain.lobes.models.HifiGAN.HifiganDiscriminator

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
    generator: !ref <generator>
    discriminator: !ref <discriminator>

#generator loss
mel_dict:
        sample_rate: 16000
        n_mels: 64
        f_min: 0
        f_max: 8000
        power: 1
        norm: "slaney"
        mel_scale: "slaney"
        normalized: False
        level: (6, 11)
        loss_tp: l1
stft_loss: null
commit_loss: !new:models.CommitLoss
magri_loss: !new:models.MagRILoss
  loss_tp: l2
mseg_loss: !new:speechbrain.lobes.models.HifiGAN.MSEGLoss
feat_match_loss: !new:speechbrain.lobes.models.HifiGAN.MelganFeatureLoss
multimel_loss: !new:models.MultiScaleMelLoss
  mel_dict: !ref <mel_dict>

generator_loss: !new:models.GeneratorLoss
  stft_loss: !ref <stft_loss>
  stft_loss_weight: 0
  mseg_loss: !ref <mseg_loss>
  mseg_loss_weight: 1
  feat_match_loss: !ref <feat_match_loss>
  feat_match_loss_weight: 100
  magri_loss: !ref  <magri_loss>
  magri_loss_weight: 100
  multimel_loss: !ref <multimel_loss>
  multimel_loss_weight: 100
  commit_loss: !ref <commit_loss>
  commit_loss_weight: 10

#discriminator loss
msed_loss: !new:speechbrain.lobes.models.HifiGAN.MSEDLoss

discriminator_loss: !new:speechbrain.lobes.models.HifiGAN.DiscriminatorLoss
  msed_loss: !ref <msed_loss>

#optimizer
opt_class_generator: !name:torch.optim.Adam
  lr: !ref <learning_rate_g>
  betas: [!ref <adam_b1>, !ref <adam_b2>]

opt_class_discriminator: !name:torch.optim.Adam
  lr: !ref <learning_rate_d>
  betas: [!ref <adam_b1>, !ref <adam_b2>]

# sch_class_generator: !name:torch.optim.lr_scheduler.ExponentialLR
#   gamma: !ref <weight_decay>
#   last_epoch: -1

# sch_class_discriminator: !name:torch.optim.lr_scheduler.ExponentialLR
#   gamma: !ref <weight_decay>
#   last_epoch: -1

#checkpointer
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: !ref <save_folder>
  recoverables:
    generator: !ref <generator>
    discriminator: !ref <discriminator>
    counter: !ref <epoch_counter>
